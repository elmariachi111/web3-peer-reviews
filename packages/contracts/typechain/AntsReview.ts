/* Autogenerated file. Do not edit manually. */
// @ts-nocheck
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export interface AntsReviewInterface extends utils.Interface {
  functions: {
    "DEFAULT_ADMIN_ROLE()": FunctionFragment;
    "ISSUER_ROLE()": FunctionFragment;
    "ORCID_CONTRACT_ADD()": FunctionFragment;
    "PAUSER_ROLE()": FunctionFragment;
    "PEER_REVIEWER_ROLE()": FunctionFragment;
    "acceptAntReview(uint256,uint256,uint256)": FunctionFragment;
    "addApprover(uint256,uint256,address)": FunctionFragment;
    "addIssuer(address)": FunctionFragment;
    "addPeerReviewer(address)": FunctionFragment;
    "antReviewIdTracker()": FunctionFragment;
    "antreviews(uint256)": FunctionFragment;
    "changeAntReview(uint256,uint256,address[],string,string,uint64)": FunctionFragment;
    "contribute(uint256,uint256)": FunctionFragment;
    "contributions(uint256,uint256)": FunctionFragment;
    "fulfillAntReview(uint256,string)": FunctionFragment;
    "getApprover(uint256,uint256)": FunctionFragment;
    "getRoleAdmin(bytes32)": FunctionFragment;
    "grantRole(bytes32,address)": FunctionFragment;
    "hasRole(bytes32,address)": FunctionFragment;
    "isAdmin(address)": FunctionFragment;
    "isIssuer(address)": FunctionFragment;
    "isPeerReviewer(address)": FunctionFragment;
    "issueAntReview(address[],address,string,string,uint64)": FunctionFragment;
    "orcid()": FunctionFragment;
    "owner()": FunctionFragment;
    "pause()": FunctionFragment;
    "paused()": FunctionFragment;
    "peer_reviews(uint256,uint256)": FunctionFragment;
    "refund(uint256,uint256)": FunctionFragment;
    "removeApprover(uint256,uint256,address)": FunctionFragment;
    "removeIssuer(address)": FunctionFragment;
    "removePeerReviewer(address)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "renounceRole(bytes32,address)": FunctionFragment;
    "revokeRole(bytes32,address)": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "unpause()": FunctionFragment;
    "updateReview(uint256,uint256,string)": FunctionFragment;
    "withdrawAntReview(uint256,uint256,uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "DEFAULT_ADMIN_ROLE"
      | "ISSUER_ROLE"
      | "ORCID_CONTRACT_ADD"
      | "PAUSER_ROLE"
      | "PEER_REVIEWER_ROLE"
      | "acceptAntReview"
      | "addApprover"
      | "addIssuer"
      | "addPeerReviewer"
      | "antReviewIdTracker"
      | "antreviews"
      | "changeAntReview"
      | "contribute"
      | "contributions"
      | "fulfillAntReview"
      | "getApprover"
      | "getRoleAdmin"
      | "grantRole"
      | "hasRole"
      | "isAdmin"
      | "isIssuer"
      | "isPeerReviewer"
      | "issueAntReview"
      | "orcid"
      | "owner"
      | "pause"
      | "paused"
      | "peer_reviews"
      | "refund"
      | "removeApprover"
      | "removeIssuer"
      | "removePeerReviewer"
      | "renounceOwnership"
      | "renounceRole"
      | "revokeRole"
      | "supportsInterface"
      | "transferOwnership"
      | "unpause"
      | "updateReview"
      | "withdrawAntReview"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "ISSUER_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "ORCID_CONTRACT_ADD",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "PAUSER_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "PEER_REVIEWER_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "acceptAntReview",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "addApprover",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "addIssuer",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "addPeerReviewer",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "antReviewIdTracker",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "antreviews",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "changeAntReview",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>[],
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "contribute",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "contributions",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "fulfillAntReview",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getApprover",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleAdmin",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "grantRole",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "hasRole",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "isAdmin",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "isIssuer",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "isPeerReviewer",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "issueAntReview",
    values: [
      PromiseOrValue<string>[],
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(functionFragment: "orcid", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "pause", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "peer_reviews",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "refund",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "removeApprover",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "removeIssuer",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "removePeerReviewer",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceRole",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeRole",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "unpause", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "updateReview",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawAntReview",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ISSUER_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ORCID_CONTRACT_ADD",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "PAUSER_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "PEER_REVIEWER_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "acceptAntReview",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addApprover",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "addIssuer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "addPeerReviewer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "antReviewIdTracker",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "antreviews", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "changeAntReview",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "contribute", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "contributions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "fulfillAntReview",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getApprover",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isAdmin", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isIssuer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isPeerReviewer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "issueAntReview",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "orcid", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "peer_reviews",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "refund", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "removeApprover",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeIssuer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removePeerReviewer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unpause", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updateReview",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawAntReview",
    data: BytesLike
  ): Result;

  events: {
    "AntReviewAccepted(uint256,uint256,address,uint256)": EventFragment;
    "AntReviewChanged(uint256,address,address[],string,string,uint64)": EventFragment;
    "AntReviewFulfilled(uint256,uint256,address,string)": EventFragment;
    "AntReviewIssued(uint256,address[],string,string,uint64)": EventFragment;
    "AntReviewWithdrawn(uint256,address,uint256,uint256)": EventFragment;
    "ApproverAdded(uint256,uint256,address)": EventFragment;
    "ApproverRemoved(uint256,uint256,address)": EventFragment;
    "ContributionAdded(uint256,uint256,address,uint256)": EventFragment;
    "ContributionRefunded(uint256,uint256,address)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "Paused(address)": EventFragment;
    "ReviewUpdated(uint256,uint256,string)": EventFragment;
    "RoleAdminChanged(bytes32,bytes32,bytes32)": EventFragment;
    "RoleGranted(bytes32,address,address)": EventFragment;
    "RoleRevoked(bytes32,address,address)": EventFragment;
    "Unpaused(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AntReviewAccepted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AntReviewChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AntReviewFulfilled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AntReviewIssued"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AntReviewWithdrawn"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ApproverAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ApproverRemoved"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ContributionAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ContributionRefunded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Paused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ReviewUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleAdminChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleGranted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleRevoked"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Unpaused"): EventFragment;
}

export interface AntReviewAcceptedEventObject {
  antId: BigNumber;
  reviewId: BigNumber;
  approver: string;
  amount: BigNumber;
}
export type AntReviewAcceptedEvent = TypedEvent<
  [BigNumber, BigNumber, string, BigNumber],
  AntReviewAcceptedEventObject
>;

export type AntReviewAcceptedEventFilter =
  TypedEventFilter<AntReviewAcceptedEvent>;

export interface AntReviewChangedEventObject {
  antId: BigNumber;
  issuer: string;
  issuers: string[];
  paperHash: string;
  topicsHash: string;
  deadline: BigNumber;
}
export type AntReviewChangedEvent = TypedEvent<
  [BigNumber, string, string[], string, string, BigNumber],
  AntReviewChangedEventObject
>;

export type AntReviewChangedEventFilter =
  TypedEventFilter<AntReviewChangedEvent>;

export interface AntReviewFulfilledEventObject {
  antId: BigNumber;
  reviewId: BigNumber;
  peer_reviewer: string;
  reviewHash: string;
}
export type AntReviewFulfilledEvent = TypedEvent<
  [BigNumber, BigNumber, string, string],
  AntReviewFulfilledEventObject
>;

export type AntReviewFulfilledEventFilter =
  TypedEventFilter<AntReviewFulfilledEvent>;

export interface AntReviewIssuedEventObject {
  antId: BigNumber;
  issuers: string[];
  paperHash: string;
  topicsHash: string;
  deadline: BigNumber;
}
export type AntReviewIssuedEvent = TypedEvent<
  [BigNumber, string[], string, string, BigNumber],
  AntReviewIssuedEventObject
>;

export type AntReviewIssuedEventFilter = TypedEventFilter<AntReviewIssuedEvent>;

export interface AntReviewWithdrawnEventObject {
  antId: BigNumber;
  issuer: string;
  amount: BigNumber;
  balance: BigNumber;
}
export type AntReviewWithdrawnEvent = TypedEvent<
  [BigNumber, string, BigNumber, BigNumber],
  AntReviewWithdrawnEventObject
>;

export type AntReviewWithdrawnEventFilter =
  TypedEventFilter<AntReviewWithdrawnEvent>;

export interface ApproverAddedEventObject {
  antId: BigNumber;
  issuerId: BigNumber;
  approver: string;
}
export type ApproverAddedEvent = TypedEvent<
  [BigNumber, BigNumber, string],
  ApproverAddedEventObject
>;

export type ApproverAddedEventFilter = TypedEventFilter<ApproverAddedEvent>;

export interface ApproverRemovedEventObject {
  antId: BigNumber;
  issuerId: BigNumber;
  approver: string;
}
export type ApproverRemovedEvent = TypedEvent<
  [BigNumber, BigNumber, string],
  ApproverRemovedEventObject
>;

export type ApproverRemovedEventFilter = TypedEventFilter<ApproverRemovedEvent>;

export interface ContributionAddedEventObject {
  antId: BigNumber;
  contributionId: BigNumber;
  contributor: string;
  amount: BigNumber;
}
export type ContributionAddedEvent = TypedEvent<
  [BigNumber, BigNumber, string, BigNumber],
  ContributionAddedEventObject
>;

export type ContributionAddedEventFilter =
  TypedEventFilter<ContributionAddedEvent>;

export interface ContributionRefundedEventObject {
  antId: BigNumber;
  contributionId: BigNumber;
  contributor: string;
}
export type ContributionRefundedEvent = TypedEvent<
  [BigNumber, BigNumber, string],
  ContributionRefundedEventObject
>;

export type ContributionRefundedEventFilter =
  TypedEventFilter<ContributionRefundedEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface PausedEventObject {
  account: string;
}
export type PausedEvent = TypedEvent<[string], PausedEventObject>;

export type PausedEventFilter = TypedEventFilter<PausedEvent>;

export interface ReviewUpdatedEventObject {
  antId: BigNumber;
  reviewId: BigNumber;
  reviewHash: string;
}
export type ReviewUpdatedEvent = TypedEvent<
  [BigNumber, BigNumber, string],
  ReviewUpdatedEventObject
>;

export type ReviewUpdatedEventFilter = TypedEventFilter<ReviewUpdatedEvent>;

export interface RoleAdminChangedEventObject {
  role: string;
  previousAdminRole: string;
  newAdminRole: string;
}
export type RoleAdminChangedEvent = TypedEvent<
  [string, string, string],
  RoleAdminChangedEventObject
>;

export type RoleAdminChangedEventFilter =
  TypedEventFilter<RoleAdminChangedEvent>;

export interface RoleGrantedEventObject {
  role: string;
  account: string;
  sender: string;
}
export type RoleGrantedEvent = TypedEvent<
  [string, string, string],
  RoleGrantedEventObject
>;

export type RoleGrantedEventFilter = TypedEventFilter<RoleGrantedEvent>;

export interface RoleRevokedEventObject {
  role: string;
  account: string;
  sender: string;
}
export type RoleRevokedEvent = TypedEvent<
  [string, string, string],
  RoleRevokedEventObject
>;

export type RoleRevokedEventFilter = TypedEventFilter<RoleRevokedEvent>;

export interface UnpausedEventObject {
  account: string;
}
export type UnpausedEvent = TypedEvent<[string], UnpausedEventObject>;

export type UnpausedEventFilter = TypedEventFilter<UnpausedEvent>;

export interface AntsReview extends BaseContract {
  contractName: "AntsReview";

  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: AntsReviewInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<[string]>;

    ISSUER_ROLE(overrides?: CallOverrides): Promise<[string]>;

    ORCID_CONTRACT_ADD(overrides?: CallOverrides): Promise<[string]>;

    PAUSER_ROLE(overrides?: CallOverrides): Promise<[string]>;

    PEER_REVIEWER_ROLE(overrides?: CallOverrides): Promise<[string]>;

    acceptAntReview(
      _antId: PromiseOrValue<BigNumberish>,
      _reviewId: PromiseOrValue<BigNumberish>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    addApprover(
      _antId: PromiseOrValue<BigNumberish>,
      _issuerId: PromiseOrValue<BigNumberish>,
      _account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    addIssuer(
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    addPeerReviewer(
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    antReviewIdTracker(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { _value: BigNumber }>;

    antreviews(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [string, string, BigNumber, number, BigNumber] & {
        paperHash: string;
        topicsHash: string;
        deadline: BigNumber;
        status: number;
        balance: BigNumber;
      }
    >;

    changeAntReview(
      _antId: PromiseOrValue<BigNumberish>,
      _issuerId: PromiseOrValue<BigNumberish>,
      _issuers: PromiseOrValue<string>[],
      _paperHash: PromiseOrValue<string>,
      _topicsHash: PromiseOrValue<string>,
      _deadline: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    contribute(
      _antId: PromiseOrValue<BigNumberish>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    contributions(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, boolean] & {
        contributor: string;
        amount: BigNumber;
        refunded: boolean;
      }
    >;

    fulfillAntReview(
      _antId: PromiseOrValue<BigNumberish>,
      _reviewHash: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getApprover(
      _antId: PromiseOrValue<BigNumberish>,
      _approverId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string] & { approver: string }>;

    getRoleAdmin(
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    grantRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    hasRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isAdmin(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isIssuer(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isPeerReviewer(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    issueAntReview(
      _issuers: PromiseOrValue<string>[],
      _approver: PromiseOrValue<string>,
      _paperHash: PromiseOrValue<string>,
      _topicsHash: PromiseOrValue<string>,
      _deadline: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    orcid(overrides?: CallOverrides): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    pause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    paused(overrides?: CallOverrides): Promise<[boolean]>;

    peer_reviews(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [boolean, string, string] & {
        accepted: boolean;
        peer_reviewer: string;
        reviewHash: string;
      }
    >;

    refund(
      _antId: PromiseOrValue<BigNumberish>,
      _contributionId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    removeApprover(
      _antId: PromiseOrValue<BigNumberish>,
      _issuerId: PromiseOrValue<BigNumberish>,
      _account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    removeIssuer(
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    removePeerReviewer(
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    renounceRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    revokeRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    unpause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updateReview(
      _antId: PromiseOrValue<BigNumberish>,
      _reviewId: PromiseOrValue<BigNumberish>,
      _reviewHash: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    withdrawAntReview(
      _antId: PromiseOrValue<BigNumberish>,
      _issuerId: PromiseOrValue<BigNumberish>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

  ISSUER_ROLE(overrides?: CallOverrides): Promise<string>;

  ORCID_CONTRACT_ADD(overrides?: CallOverrides): Promise<string>;

  PAUSER_ROLE(overrides?: CallOverrides): Promise<string>;

  PEER_REVIEWER_ROLE(overrides?: CallOverrides): Promise<string>;

  acceptAntReview(
    _antId: PromiseOrValue<BigNumberish>,
    _reviewId: PromiseOrValue<BigNumberish>,
    _amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  addApprover(
    _antId: PromiseOrValue<BigNumberish>,
    _issuerId: PromiseOrValue<BigNumberish>,
    _account: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  addIssuer(
    account: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  addPeerReviewer(
    account: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  antReviewIdTracker(overrides?: CallOverrides): Promise<BigNumber>;

  antreviews(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [string, string, BigNumber, number, BigNumber] & {
      paperHash: string;
      topicsHash: string;
      deadline: BigNumber;
      status: number;
      balance: BigNumber;
    }
  >;

  changeAntReview(
    _antId: PromiseOrValue<BigNumberish>,
    _issuerId: PromiseOrValue<BigNumberish>,
    _issuers: PromiseOrValue<string>[],
    _paperHash: PromiseOrValue<string>,
    _topicsHash: PromiseOrValue<string>,
    _deadline: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  contribute(
    _antId: PromiseOrValue<BigNumberish>,
    _amount: PromiseOrValue<BigNumberish>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  contributions(
    arg0: PromiseOrValue<BigNumberish>,
    arg1: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [string, BigNumber, boolean] & {
      contributor: string;
      amount: BigNumber;
      refunded: boolean;
    }
  >;

  fulfillAntReview(
    _antId: PromiseOrValue<BigNumberish>,
    _reviewHash: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getApprover(
    _antId: PromiseOrValue<BigNumberish>,
    _approverId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  getRoleAdmin(
    role: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<string>;

  grantRole(
    role: PromiseOrValue<BytesLike>,
    account: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  hasRole(
    role: PromiseOrValue<BytesLike>,
    account: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isAdmin(
    account: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isIssuer(
    account: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isPeerReviewer(
    account: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  issueAntReview(
    _issuers: PromiseOrValue<string>[],
    _approver: PromiseOrValue<string>,
    _paperHash: PromiseOrValue<string>,
    _topicsHash: PromiseOrValue<string>,
    _deadline: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  orcid(overrides?: CallOverrides): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  pause(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  paused(overrides?: CallOverrides): Promise<boolean>;

  peer_reviews(
    arg0: PromiseOrValue<BigNumberish>,
    arg1: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [boolean, string, string] & {
      accepted: boolean;
      peer_reviewer: string;
      reviewHash: string;
    }
  >;

  refund(
    _antId: PromiseOrValue<BigNumberish>,
    _contributionId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  removeApprover(
    _antId: PromiseOrValue<BigNumberish>,
    _issuerId: PromiseOrValue<BigNumberish>,
    _account: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  removeIssuer(
    account: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  removePeerReviewer(
    account: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  renounceRole(
    role: PromiseOrValue<BytesLike>,
    account: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  revokeRole(
    role: PromiseOrValue<BytesLike>,
    account: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  supportsInterface(
    interfaceId: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  unpause(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updateReview(
    _antId: PromiseOrValue<BigNumberish>,
    _reviewId: PromiseOrValue<BigNumberish>,
    _reviewHash: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  withdrawAntReview(
    _antId: PromiseOrValue<BigNumberish>,
    _issuerId: PromiseOrValue<BigNumberish>,
    _amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

    ISSUER_ROLE(overrides?: CallOverrides): Promise<string>;

    ORCID_CONTRACT_ADD(overrides?: CallOverrides): Promise<string>;

    PAUSER_ROLE(overrides?: CallOverrides): Promise<string>;

    PEER_REVIEWER_ROLE(overrides?: CallOverrides): Promise<string>;

    acceptAntReview(
      _antId: PromiseOrValue<BigNumberish>,
      _reviewId: PromiseOrValue<BigNumberish>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    addApprover(
      _antId: PromiseOrValue<BigNumberish>,
      _issuerId: PromiseOrValue<BigNumberish>,
      _account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    addIssuer(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    addPeerReviewer(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    antReviewIdTracker(overrides?: CallOverrides): Promise<BigNumber>;

    antreviews(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [string, string, BigNumber, number, BigNumber] & {
        paperHash: string;
        topicsHash: string;
        deadline: BigNumber;
        status: number;
        balance: BigNumber;
      }
    >;

    changeAntReview(
      _antId: PromiseOrValue<BigNumberish>,
      _issuerId: PromiseOrValue<BigNumberish>,
      _issuers: PromiseOrValue<string>[],
      _paperHash: PromiseOrValue<string>,
      _topicsHash: PromiseOrValue<string>,
      _deadline: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    contribute(
      _antId: PromiseOrValue<BigNumberish>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    contributions(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, boolean] & {
        contributor: string;
        amount: BigNumber;
        refunded: boolean;
      }
    >;

    fulfillAntReview(
      _antId: PromiseOrValue<BigNumberish>,
      _reviewHash: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    getApprover(
      _antId: PromiseOrValue<BigNumberish>,
      _approverId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    getRoleAdmin(
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    grantRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    hasRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isAdmin(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isIssuer(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isPeerReviewer(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    issueAntReview(
      _issuers: PromiseOrValue<string>[],
      _approver: PromiseOrValue<string>,
      _paperHash: PromiseOrValue<string>,
      _topicsHash: PromiseOrValue<string>,
      _deadline: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    orcid(overrides?: CallOverrides): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    pause(overrides?: CallOverrides): Promise<void>;

    paused(overrides?: CallOverrides): Promise<boolean>;

    peer_reviews(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [boolean, string, string] & {
        accepted: boolean;
        peer_reviewer: string;
        reviewHash: string;
      }
    >;

    refund(
      _antId: PromiseOrValue<BigNumberish>,
      _contributionId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    removeApprover(
      _antId: PromiseOrValue<BigNumberish>,
      _issuerId: PromiseOrValue<BigNumberish>,
      _account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    removeIssuer(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    removePeerReviewer(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    renounceRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    revokeRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    unpause(overrides?: CallOverrides): Promise<void>;

    updateReview(
      _antId: PromiseOrValue<BigNumberish>,
      _reviewId: PromiseOrValue<BigNumberish>,
      _reviewHash: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    withdrawAntReview(
      _antId: PromiseOrValue<BigNumberish>,
      _issuerId: PromiseOrValue<BigNumberish>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;
  };

  filters: {
    "AntReviewAccepted(uint256,uint256,address,uint256)"(
      antId?: null,
      reviewId?: null,
      approver?: null,
      amount?: null
    ): AntReviewAcceptedEventFilter;
    AntReviewAccepted(
      antId?: null,
      reviewId?: null,
      approver?: null,
      amount?: null
    ): AntReviewAcceptedEventFilter;

    "AntReviewChanged(uint256,address,address[],string,string,uint64)"(
      antId?: null,
      issuer?: null,
      issuers?: null,
      paperHash?: null,
      topicsHash?: null,
      deadline?: null
    ): AntReviewChangedEventFilter;
    AntReviewChanged(
      antId?: null,
      issuer?: null,
      issuers?: null,
      paperHash?: null,
      topicsHash?: null,
      deadline?: null
    ): AntReviewChangedEventFilter;

    "AntReviewFulfilled(uint256,uint256,address,string)"(
      antId?: null,
      reviewId?: null,
      peer_reviewer?: null,
      reviewHash?: null
    ): AntReviewFulfilledEventFilter;
    AntReviewFulfilled(
      antId?: null,
      reviewId?: null,
      peer_reviewer?: null,
      reviewHash?: null
    ): AntReviewFulfilledEventFilter;

    "AntReviewIssued(uint256,address[],string,string,uint64)"(
      antId?: null,
      issuers?: null,
      paperHash?: null,
      topicsHash?: null,
      deadline?: null
    ): AntReviewIssuedEventFilter;
    AntReviewIssued(
      antId?: null,
      issuers?: null,
      paperHash?: null,
      topicsHash?: null,
      deadline?: null
    ): AntReviewIssuedEventFilter;

    "AntReviewWithdrawn(uint256,address,uint256,uint256)"(
      antId?: null,
      issuer?: null,
      amount?: null,
      balance?: null
    ): AntReviewWithdrawnEventFilter;
    AntReviewWithdrawn(
      antId?: null,
      issuer?: null,
      amount?: null,
      balance?: null
    ): AntReviewWithdrawnEventFilter;

    "ApproverAdded(uint256,uint256,address)"(
      antId?: null,
      issuerId?: null,
      approver?: null
    ): ApproverAddedEventFilter;
    ApproverAdded(
      antId?: null,
      issuerId?: null,
      approver?: null
    ): ApproverAddedEventFilter;

    "ApproverRemoved(uint256,uint256,address)"(
      antId?: null,
      issuerId?: null,
      approver?: null
    ): ApproverRemovedEventFilter;
    ApproverRemoved(
      antId?: null,
      issuerId?: null,
      approver?: null
    ): ApproverRemovedEventFilter;

    "ContributionAdded(uint256,uint256,address,uint256)"(
      antId?: null,
      contributionId?: null,
      contributor?: null,
      amount?: null
    ): ContributionAddedEventFilter;
    ContributionAdded(
      antId?: null,
      contributionId?: null,
      contributor?: null,
      amount?: null
    ): ContributionAddedEventFilter;

    "ContributionRefunded(uint256,uint256,address)"(
      antId?: null,
      contributionId?: null,
      contributor?: null
    ): ContributionRefundedEventFilter;
    ContributionRefunded(
      antId?: null,
      contributionId?: null,
      contributor?: null
    ): ContributionRefundedEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;

    "Paused(address)"(account?: null): PausedEventFilter;
    Paused(account?: null): PausedEventFilter;

    "ReviewUpdated(uint256,uint256,string)"(
      antId?: null,
      reviewId?: null,
      reviewHash?: null
    ): ReviewUpdatedEventFilter;
    ReviewUpdated(
      antId?: null,
      reviewId?: null,
      reviewHash?: null
    ): ReviewUpdatedEventFilter;

    "RoleAdminChanged(bytes32,bytes32,bytes32)"(
      role?: PromiseOrValue<BytesLike> | null,
      previousAdminRole?: PromiseOrValue<BytesLike> | null,
      newAdminRole?: PromiseOrValue<BytesLike> | null
    ): RoleAdminChangedEventFilter;
    RoleAdminChanged(
      role?: PromiseOrValue<BytesLike> | null,
      previousAdminRole?: PromiseOrValue<BytesLike> | null,
      newAdminRole?: PromiseOrValue<BytesLike> | null
    ): RoleAdminChangedEventFilter;

    "RoleGranted(bytes32,address,address)"(
      role?: PromiseOrValue<BytesLike> | null,
      account?: PromiseOrValue<string> | null,
      sender?: PromiseOrValue<string> | null
    ): RoleGrantedEventFilter;
    RoleGranted(
      role?: PromiseOrValue<BytesLike> | null,
      account?: PromiseOrValue<string> | null,
      sender?: PromiseOrValue<string> | null
    ): RoleGrantedEventFilter;

    "RoleRevoked(bytes32,address,address)"(
      role?: PromiseOrValue<BytesLike> | null,
      account?: PromiseOrValue<string> | null,
      sender?: PromiseOrValue<string> | null
    ): RoleRevokedEventFilter;
    RoleRevoked(
      role?: PromiseOrValue<BytesLike> | null,
      account?: PromiseOrValue<string> | null,
      sender?: PromiseOrValue<string> | null
    ): RoleRevokedEventFilter;

    "Unpaused(address)"(account?: null): UnpausedEventFilter;
    Unpaused(account?: null): UnpausedEventFilter;
  };

  estimateGas: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    ISSUER_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    ORCID_CONTRACT_ADD(overrides?: CallOverrides): Promise<BigNumber>;

    PAUSER_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    PEER_REVIEWER_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    acceptAntReview(
      _antId: PromiseOrValue<BigNumberish>,
      _reviewId: PromiseOrValue<BigNumberish>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    addApprover(
      _antId: PromiseOrValue<BigNumberish>,
      _issuerId: PromiseOrValue<BigNumberish>,
      _account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    addIssuer(
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    addPeerReviewer(
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    antReviewIdTracker(overrides?: CallOverrides): Promise<BigNumber>;

    antreviews(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    changeAntReview(
      _antId: PromiseOrValue<BigNumberish>,
      _issuerId: PromiseOrValue<BigNumberish>,
      _issuers: PromiseOrValue<string>[],
      _paperHash: PromiseOrValue<string>,
      _topicsHash: PromiseOrValue<string>,
      _deadline: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    contribute(
      _antId: PromiseOrValue<BigNumberish>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    contributions(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    fulfillAntReview(
      _antId: PromiseOrValue<BigNumberish>,
      _reviewHash: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getApprover(
      _antId: PromiseOrValue<BigNumberish>,
      _approverId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRoleAdmin(
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    grantRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    hasRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isAdmin(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isIssuer(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isPeerReviewer(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    issueAntReview(
      _issuers: PromiseOrValue<string>[],
      _approver: PromiseOrValue<string>,
      _paperHash: PromiseOrValue<string>,
      _topicsHash: PromiseOrValue<string>,
      _deadline: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    orcid(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    pause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    paused(overrides?: CallOverrides): Promise<BigNumber>;

    peer_reviews(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    refund(
      _antId: PromiseOrValue<BigNumberish>,
      _contributionId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    removeApprover(
      _antId: PromiseOrValue<BigNumberish>,
      _issuerId: PromiseOrValue<BigNumberish>,
      _account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    removeIssuer(
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    removePeerReviewer(
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    renounceRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    revokeRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    unpause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updateReview(
      _antId: PromiseOrValue<BigNumberish>,
      _reviewId: PromiseOrValue<BigNumberish>,
      _reviewHash: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    withdrawAntReview(
      _antId: PromiseOrValue<BigNumberish>,
      _issuerId: PromiseOrValue<BigNumberish>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    DEFAULT_ADMIN_ROLE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    ISSUER_ROLE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ORCID_CONTRACT_ADD(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    PAUSER_ROLE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    PEER_REVIEWER_ROLE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    acceptAntReview(
      _antId: PromiseOrValue<BigNumberish>,
      _reviewId: PromiseOrValue<BigNumberish>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    addApprover(
      _antId: PromiseOrValue<BigNumberish>,
      _issuerId: PromiseOrValue<BigNumberish>,
      _account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    addIssuer(
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    addPeerReviewer(
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    antReviewIdTracker(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    antreviews(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    changeAntReview(
      _antId: PromiseOrValue<BigNumberish>,
      _issuerId: PromiseOrValue<BigNumberish>,
      _issuers: PromiseOrValue<string>[],
      _paperHash: PromiseOrValue<string>,
      _topicsHash: PromiseOrValue<string>,
      _deadline: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    contribute(
      _antId: PromiseOrValue<BigNumberish>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    contributions(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    fulfillAntReview(
      _antId: PromiseOrValue<BigNumberish>,
      _reviewHash: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getApprover(
      _antId: PromiseOrValue<BigNumberish>,
      _approverId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRoleAdmin(
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    grantRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    hasRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isAdmin(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isIssuer(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isPeerReviewer(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    issueAntReview(
      _issuers: PromiseOrValue<string>[],
      _approver: PromiseOrValue<string>,
      _paperHash: PromiseOrValue<string>,
      _topicsHash: PromiseOrValue<string>,
      _deadline: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    orcid(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    paused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    peer_reviews(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    refund(
      _antId: PromiseOrValue<BigNumberish>,
      _contributionId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    removeApprover(
      _antId: PromiseOrValue<BigNumberish>,
      _issuerId: PromiseOrValue<BigNumberish>,
      _account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    removeIssuer(
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    removePeerReviewer(
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    renounceRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    revokeRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    unpause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updateReview(
      _antId: PromiseOrValue<BigNumberish>,
      _reviewId: PromiseOrValue<BigNumberish>,
      _reviewHash: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    withdrawAntReview(
      _antId: PromiseOrValue<BigNumberish>,
      _issuerId: PromiseOrValue<BigNumberish>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
